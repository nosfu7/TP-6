# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: CI/CD Pipeline Flask App

# Événement qui déclenche le workflow
on:
  # Se déclenche à chaque fois que tu pousses du code sur la branche "main"
  push:
    branches: [ main ]

# Les tâches (jobs) à exécuter
jobs:
  build-and-deploy:
    # Le type de machine virtuelle sur laquelle exécuter les commandes
    runs-on: ubuntu-latest

    # La séquence des étapes à suivre
    steps:
      # 1. Récupère le code de ton dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configure l'environnement Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Installe les dépendances listées dans requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Exécute un test simple pour vérifier que Flask est bien installé
      - name: Run tests
        run: |
          python -c "import flask; print('Flask imported successfully')"

      # 5. Construit l'image Docker (comme demandé dans le TP)
      - name: Build Docker image
        run: docker build -t flask-persistent-app .

      # 6. Déploie les fichiers sur ton serveur en utilisant FTP
      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          # L'adresse de ton serveur FTP (à configurer dans les secrets)
          server: ${{ secrets.FTP_SERVER }}
          # Le nom d'utilisateur FTP (à configurer dans les secrets)
          username: ${{ secrets.FTP_USERNAME }}
          # Le mot de passe FTP (à configurer dans les secrets)
          password: ${{ secrets.FTP_PASSWORD }}
          # Le dossier local à envoyer (ici, tout le projet)
          local-dir: ./
          # Le dossier de destination sur le serveur
          server-dir: /var/www/html/flask-app/
